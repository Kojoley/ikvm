name: IKVM

on:
  push:
    branches:
    - main
    - hotfix/*
    - develop
    - release/*
  pull_request:
    branches:
    - main
    - develop

jobs:
  build-openjdk-linux-x64:
    name: Build OpenJDK (Linux x64)
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/linux-x86_64-normal-server-release
        key: openjdk-build-linux-x86_64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-11
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: openjdk/build/linux-x86_64-normal-server-release/stamp
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk/build && 
        curl -o openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-linux_x64.tar.gz "https://cdn.azul.com/zulu/bin/zulu7.56.0.11-ca-jdk7.0.352-linux_x64.tar.gz" &&
        tar xzvf openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-linux_x64.tar.gz -C openjdk/build
    - name: Install Packages
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        sudo apt-get update &&
        sudo apt-get install -y \
            build-essential \
            unzip \
            zip \
            curl \
            gcc-11 \
            g++-11 \
            libx11-dev \
            libxext-dev \
            libxrender-dev \
            libxtst-dev \
            libxt-dev \
            libxi-dev \
            libcups2-dev \
            libasound2-dev \
            libfreetype6-dev \
            libfontconfig1-dev
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        cd openjdk &&
        bash ./configure \
          --with-boot-jdk=$GITHUB_WORKSPACE/openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-linux_x64 \
          --disable-precompiled-headers &&
        make images &&
        touch build/linux-x86_64-normal-server-release/stamp
    - name: Update OpenJDK Attributes
      run: |
        sudo chown -R `id -u`:`id -g` linux-x86_64-normal-server-release &&
        sudo chmod -R +rwx linux-x86_64-normal-server-release/images/j2sdk-image/bin
      working-directory: openjdk/build
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-linux-x86_64-normal-server-release.zip \
          linux-x86_64-normal-server-release/langtools/gensrc \
          linux-x86_64-normal-server-release/corba/gensrc \
          linux-x86_64-normal-server-release/jdk/gensrc \
          linux-x86_64-normal-server-release/jdk/impsrc \
          linux-x86_64-normal-server-release/jdk/lib \
          linux-x86_64-normal-server-release/jdk/classes \
          linux-x86_64-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-linux-x86_64-normal-server-release
        path: openjdk/build/openjdk-build-linux-x86_64-normal-server-release.zip
    - name: Cache OpenJDK Test Harness Build
      uses: actions/cache@v3
      with:
        path: jtreg/build
        key: jtreg-build--${{ runner.os }}--${{ hashFiles('jtreg/**', 'openjdk/build/linux-x86_64-normal-server-release/images/j2sdk-image', '!jtreg/build') }}-6
    - name: Check OpenJDK Test Harness Build Stamp
      id: jtreg-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: jtreg/build/stamp
    - name: Build OpenJDK Test Harness
      if: steps.jtreg-build-stamp.outputs.files_exists != 'true'
      run: bash make/build-all.sh `realpath ../openjdk/build/linux-x86_64-normal-server-release/images/j2sdk-image` && touch build/stamp
      working-directory: jtreg
    - name: Package OpenJDK Test Harness
      run: zip -r jtreg-build.zip build
      working-directory: jtreg
    - name: Upload OpenJDK Test Harness 
      uses: actions/upload-artifact@v3
      with:
        name: jtreg-build
        path: jtreg/jtreg-build.zip
  build-openjdk-linux-arm64:
    name: Build OpenJDK (Linux arm64)
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/linux-aarch64-normal-server-release
        key: openjdk-build-linux-aarch64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-11
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: openjdk/build/linux-aarch64-normal-server-release/stamp
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk/build && 
        curl -o openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-linux_x64.tar.gz "https://cdn.azul.com/zulu/bin/zulu7.56.0.11-ca-jdk7.0.352-linux_x64.tar.gz" &&
        tar xzvf openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-linux_x64.tar.gz -C openjdk/build
    - name: Install Packages
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        sudo apt-get update &&
        sudo apt-get install -y \
            build-essential \
            unzip \
            zip \
            curl \
            gcc-11-aarch64-linux-gnu \
            g++-11-aarch64-linux-gnu \
            libx11-dev \
            libxext-dev \
            libxrender-dev \
            libxtst-dev \
            libxt-dev \
            libxi-dev \
            libcups2-dev \
            libasound2-dev \
            libfreetype6-dev \
            libfontconfig1-dev
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        cd openjdk &&
        bash ./configure \
          --with-boot-jdk=$GITHUB_WORKSPACE/openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-linux_x64 \
          --openjdk-target=aarch64-unknown-linux \
          --disable-precompiled-headers &&
        make images &&
        touch build/linux-aarch64-normal-server-release/stamp
    - name: Update OpenJDK Attributes
      run: |
        sudo chown -R `id -u`:`id -g` linux-x86_64-normal-server-release && \
        sudo chmod -R +rwx linux-aarch64-normal-server-release/images/j2sdk-image/bin
      working-directory: openjdk/build
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-linux-aarch64-normal-server-release.zip \
          linux-aarch64-normal-server-release/langtools/gensrc \
          linux-aarch64-normal-server-release/corba/gensrc \
          linux-aarch64-normal-server-release/jdk/gensrc \
          linux-aarch64-normal-server-release/jdk/impsrc \
          linux-aarch64-normal-server-release/jdk/lib \
          linux-aarch64-normal-server-release/jdk/classes \
          linux-aarch64-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-linux-aarch64-normal-server-release
        path: openjdk/build/openjdk-build-linux-aarch64-normal-server-release.zip
  build-openjdk-windows-x64:
    name: Build OpenJDK (Windows x64)
    runs-on: windows-2019
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/windows-x86_64-normal-server-release
        key: openjdk-build-windows-x86_64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-9
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: openjdk/build/windows-x86_64-normal-server-release/stamp
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
    - name: Install Visual Studio Components
      shell: cmd
      run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --channelId VisualStudio.16.Release --productId Microsoft.VisualStudio.Product.Enterprise -q --includeRecommended --add "Microsoft.VisualStudio.Component.VC.14.29.x86.x64"
    - name: Install Cygwin
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      uses: egor-tensin/setup-cygwin@v4
      with:
        packages: make unzip zip
    - name: Fetch FreeType
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      shell: pwsh
      run: |
        New-Item -Type Directory -Force openjdk\build
        Invoke-WebRequest -Uri "https://download-mirror.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.5.3.tar.gz" -OutFile openjdk\build\freetype-2.5.3.tar.gz
        $env:SystemRoot\System32\tar.exe xzvf openjdk\build\freetype-2.5.3.tar.gz -C openjdk\build
    - name: Build FreeType
      shell: pwsh
      run: msbuild builds\windows\vc2010\freetype.sln /p:PlatformToolset=v142 /p:Configuration="Release Multithreaded" /p:Platform=x64 /p:ConfigurationType=StaticLibrary /p:TargetName=freetype /p:OutDir="$env:GITHUB_WORKSPACE\openjdk\build\freetype-2.5.3\lib64\" /p:IntDir="$env:GITHUB_WORKSPACE\openjdk\build\freetype-2.5.3\obj64\"
      working-directory: openjdk/build/freetype-2.5.3
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      shell: pwsh
      run: |
        New-Item -Type Directory -Force openjdk\build
        Invoke-WebRequest -Uri "https://cdn.azul.com/zulu/bin/zulu7.56.0.11-ca-jdk7.0.352-win_x64.zip" -OutFile openjdk\build\zulu7.56.0.11-ca-jdk7.0.352-win_x64.zip 
        Expand-Archive -Path openjdk\build\zulu7.56.0.11-ca-jdk7.0.352-win_x64.zip -DestinationPath openjdk\build
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
      run: |
        cd $GITHUB_WORKSPACE/openjdk &&
        bash ./configure \
          --with-boot-jdk=$GITHUB_WORKSPACE/openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-win_x64 \
          --with-freetype-lib=$GITHUB_WORKSPACE/openjdk/build/freetype-2.5.3/lib64 \
          --with-freetype-include=$GITHUB_WORKSPACE/openjdk/build/freetype-2.5.3/include \
          --with-toolchain-version=2019 \
          --with-target-bits=64 &&
        make images &&
        touch build/windows-x86_64-normal-server-release/stamp
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-windows-x86_64-normal-server-release.zip \
          windows-x86_64-normal-server-release/langtools/gensrc \
          windows-x86_64-normal-server-release/corba/gensrc \
          windows-x86_64-normal-server-release/jdk/gensrc \
          windows-x86_64-normal-server-release/jdk/impsrc \
          windows-x86_64-normal-server-release/jdk/lib \
          windows-x86_64-normal-server-release/jdk/classes \
          windows-x86_64-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-windows-x86_64-normal-server-release
        path: openjdk\build\openjdk-build-windows-x86_64-normal-server-release.zip
  build-openjdk-windows-x86:
    name: Build OpenJDK (Windows x86)
    runs-on: windows-2019
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/windows-x86-normal-server-release
        key: openjdk-build-windows-x86-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-9
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: openjdk/build/windows-x86-normal-server-release/stamp
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
    - name: Install Visual Studio Components
      shell: cmd
      run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --channelId VisualStudio.16.Release --productId Microsoft.VisualStudio.Product.Enterprise -q --includeRecommended --add "Microsoft.VisualStudio.Component.VC.14.29.x86.x64"
    - name: Install Cygwin
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      uses: egor-tensin/setup-cygwin@v4
      with:
        packages: make unzip zip
    - name: Fetch FreeType
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      shell: pwsh
      run: |
        New-Item -Type Directory -Force openjdk\build
        Invoke-WebRequest -Uri "https://download-mirror.savannah.gnu.org/releases/freetype/freetype-old/freetype-2.5.3.tar.gz" -OutFile openjdk\build\freetype-2.5.3.tar.gz
        $env:SystemRoot\System32\tar.exe xzvf openjdk\build\freetype-2.5.3.tar.gz -C openjdk\build
    - name: Build FreeType
      shell: pwsh
      run: msbuild builds\windows\vc2010\freetype.sln /p:PlatformToolset=v142 /p:Configuration="Release Multithreaded" /p:Platform=x86 /p:ConfigurationType=StaticLibrary /p:TargetName=freetype /p:OutDir="$env:GITHUB_WORKSPACE\openjdk\build\freetype-2.5.3\lib32\" /p:IntDir="$env:GITHUB_WORKSPACE\openjdk\build\freetype-2.5.3\obj32\"
      working-directory: openjdk/build/freetype-2.5.3
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      shell: pwsh
      run: |
        New-Item -Type Directory -Force openjdk\build
        Invoke-WebRequest -Uri "https://cdn.azul.com/zulu/bin/zulu7.56.0.11-ca-jdk7.0.352-win_x86.zip" -OutFile openjdk\build\zulu7.56.0.11-ca-jdk7.0.352-win_x86.zip 
        Expand-Archive -Path openjdk\build\zulu7.56.0.11-ca-jdk7.0.352-win_x86.zip -DestinationPath openjdk\build
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
      run: |
        cd $GITHUB_WORKSPACE/openjdk &&
        bash ./configure \
          --with-boot-jdk=$GITHUB_WORKSPACE/openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-win_x86 \
          --with-freetype-lib=$GITHUB_WORKSPACE/openjdk/build/freetype-2.5.3/lib64 \
          --with-freetype-include=$GITHUB_WORKSPACE/openjdk/build/freetype-2.5.3/include \
          --with-toolchain-version=2019 \
          --with-target-bits=32 &&
        make images &&
        touch build/windows-x86-normal-server-release/stamp
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-windows-x86-normal-server-release.zip \
          windows-x86-normal-server-release/langtools/gensrc \
          windows-x86-normal-server-release/corba/gensrc \
          windows-x86-normal-server-release/jdk/gensrc \
          windows-x86-normal-server-release/jdk/impsrc \
          windows-x86-normal-server-release/jdk/lib \
          windows-x86-normal-server-release/jdk/classes \
          windows-x86-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-windows-x86-normal-server-release
        path: openjdk\build\openjdk-build-windows-x86-normal-server-release.zip
  build-openjdk-osx-x64:
    name: Build OpenJDK (OSX x64)
    runs-on: macos-11
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/macosx-x86_64-normal-server-release
        key: openjdk-build-macosx-x86_64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-10
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: openjdk/build/macosx-x86_64-normal-server-release/stamp
    - name: Install XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.0
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk/build && 
        curl -o openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64.tar.gz "https://cdn.azul.com/zulu/bin/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64.tar.gz" &&
        tar xzvf openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64.tar.gz -C openjdk/build
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        cd openjdk &&
        bash ./configure \
          --with-boot-jdk=$GITHUB_WORKSPACE/openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64 \
          --disable-precompiled-headers &&
        make images &&
        touch build/macosx-x86_64-normal-server-release/stamp
    - name: Update OpenJDK Attributes
      run: |
        sudo chown -R `id -u`:`id -g` macosx-x86_64-normal-server-release && \
        sudo chmod -R +rwx macosx-x86_64-normal-server-release/images/j2sdk-image/bin
      working-directory: openjdk/build
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-macosx-x86_64-normal-server-release.zip \
          macosx-x86_64-normal-server-release/langtools/gensrc \
          macosx-x86_64-normal-server-release/corba/gensrc \
          macosx-x86_64-normal-server-release/jdk/gensrc \
          macosx-x86_64-normal-server-release/jdk/impsrc \
          macosx-x86_64-normal-server-release/jdk/lib \
          macosx-x86_64-normal-server-release/jdk/classes \
          macosx-x86_64-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-macosx-x86_64-normal-server-release
        path: openjdk/build/openjdk-build-macosx-x86_64-normal-server-release.zip
  build-openjdk-osx-arm64:
    name: Build OpenJDK (OSX arm64)
    runs-on: macos-11
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/macosx-aarch64-normal-server-release
        key: openjdk-build-macosx-aarch64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-10
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v2
      with:
        files: openjdk/build/macosx-aarch64-normal-server-release/stamp
    - name: Install XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.0
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk/build && 
        curl -o openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64.tar.gz "https://cdn.azul.com/zulu/bin/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64.tar.gz" &&
        tar xzvf openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64.tar.gz -C openjdk/build
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        cd openjdk &&
        bash ./configure \
          --with-boot-jdk=$GITHUB_WORKSPACE/openjdk/build/zulu7.56.0.11-ca-jdk7.0.352-macosx_x64 \
          --openjdk-target=aarch64-apple-macosx \
          --disable-precompiled-headers &&
        make images &&
        touch build/macosx-aarch64-normal-server-release/stamp
    - name: Update OpenJDK Attributes
      run: |
        sudo chown -R `id -u`:`id -g` macosx-aarch64-normal-server-release &&
        sudo chmod -R +rwx macosx-aarch64-normal-server-release/images/j2sdk-image/bin
      working-directory: openjdk/build
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-macosx-aarch64-normal-server-release.zip \
          macosx-aarch64-normal-server-release/langtools/gensrc \
          macosx-aarch64-normal-server-release/corba/gensrc \
          macosx-aarch64-normal-server-release/jdk/gensrc \
          macosx-aarch64-normal-server-release/jdk/impsrc \
          macosx-aarch64-normal-server-release/jdk/lib \
          macosx-aarch64-normal-server-release/jdk/classes \
          macosx-aarch64-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-macosx-x86_64-normal-server-release
        path: openjdk/build/openjdk-build-macosx-x86_64-normal-server-release.zip
  build-ikvm:
    name: Build IKVM
    needs:
    - build-openjdk-linux-x64
    - build-openjdk-linux-arm64
    - build-openjdk-windows-x64
    - build-openjdk-windows-x86
    - build-openjdk-osx-x64
    - build-openjdk-osx-arm64
    timeout-minutes: 240
    runs-on: windows-latest
    steps:
    - name: Set Paths (Windows)
      shell: pwsh
      run: |
        $WORKPATH="C:\work"
        mkdir $WORKPATH
        mkdir $WORKPATH\temp
        mkdir $WORKPATH\dotnet
        mkdir $WORKPATH\nuget
        mkdir $WORKPATH\nuget\packages
        mkdir $WORKPATH\ikvm
        Add-Content $env:GITHUB_ENV "`nWORKPATH=$WORKPATH"
        Add-Content $env:GITHUB_ENV "`nTMP=$WORKPATH\temp`nTEMP=$WORKPATH\temp`nTMPDIR=$WORKPATH\temp"
        Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=$WORKPATH\dotnet"
        Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=$WORKPATH\nuget\packages"
        New-Item -Path "$env:GITHUB_WORKSPACE\work" -ItemType SymbolicLink -Value "$WORKPATH\ikvm"
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        path: work
        fetch-depth: 0
        submodules: recursive
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: C:/Program Files/LLVM
        key: llvm-15.0
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0"
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        targetPath: ${{ env.WORKPATH }}\ikvm
        useConfigFile: true
        configFilePath: ${{ env.WORKPATH }}\ikvm\GitVersion.yml
    - name: Setup WSL
      uses: Vampire/setup-wsl@v1
      with:
        additional-packages:
          zlib1g-dev
          libmpc-dev
          libmpfr-dev
          libgmp-dev
          libxml2
          gcc
          g++
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-2-${{ hashFiles('IKVM.sln', 'src\**\*.csproj', 'src\**\*.msbuildproj') }}
        restore-keys: ${{ runner.os }}-nuget-2-
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Download OpenJDK 8 Build (Linux x64)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-linux-x86_64-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (Linux x64)
      shell: pwsh
      run: Expand-Archive openjdk-build-linux-x86_64-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download OpenJDK 8 Build (Linux arm64)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-linux-aarch64-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (Linux arm64)
      shell: pwsh
      run: Expand-Archive openjdk-build-linux-aarch64-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download OpenJDK 8 Build (Windows x86)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-windows-x86-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (Windows x86)
      shell: pwsh
      run: Expand-Archive openjdk-build-windows-x86-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download OpenJDK 8 Build (Windows x64)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-windows-x86_64-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (Windows x64)
      shell: pwsh
      run: Expand-Archive openjdk-build-windows-x86_64-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download OpenJDK 8 Build (Windows arm64)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-windows-aarch64-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (Windows arm64)
      shell: pwsh
      run: Expand-Archive openjdk-build-windows-aarch64-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download OpenJDK 8 Build (OSX x64)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-macosx-x86_64-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (OSX x64)
      shell: pwsh
      run: Expand-Archive openjdk-build-macosx-x86_64-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download OpenJDK 8 Build (OSX arm64)
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-macosx-aarch64-normal-server-release
        path: ${{ env.WORKPATH }}/ikvm/openjdk/build
    - name: Restore OpenJDK 8 Build (OSX arm64)
      shell: pwsh
      run: Expand-Archive openjdk-build-macosx-aarch64-normal-server-release.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\openjdk\build

    - name: Download JTReg Build
      uses: actions/download-artifact@v3
      with:
        name: jtreg-build
        path: ${{ env.WORKPATH }}/ikvm/jtreg
    - name: Restore JTReg Build
      shell: pwsh
      run: Expand-Archive jtreg-build.zip .
      working-directory: ${{ env.WORKPATH }}\ikvm\jtreg
    - name: NuGet Restore
      run: dotnet restore IKVM.sln
      working-directory: ${{ env.WORKPATH }}\ikvm
    - name: Build Artifacts
      run: |
        msbuild /m /bl `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblySemVer} `
          /p:InformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          /p:RepositoryUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" `
          /p:PackageProjectUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}" `
          /p:BuildInParallel=true `
          /p:CreateHardLinksForAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=true `
          /p:CreateHardLinksForCopyLocalIfPossible=true `
          /p:CreateHardLinksForPublishFilesIfPossible=true `
          /p:ContinuousIntegrationBuild=true `
          IKVM.dist.msbuildproj
      working-directory: ${{ env.WORKPATH }}\ikvm
    - name: Upload MSBuild Log
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: msbuild.binlog
        path: ${{ env.WORKPATH }}\ikvm\msbuild.binlog
    - name: Package NuGet Packages
      run: tar czvf C:\nuget.tar.gz nuget
      working-directory: ${{ env.WORKPATH }}\ikvm\dist
    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: C:\nuget.tar.gz
    - name: Package Binaries
      run: tar czvf C:\bin.tar.gz bin
      working-directory: ${{ env.WORKPATH }}\ikvm\dist
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: bin
        path: C:\bin.tar.gz
    - name: Package Tools
      run: tar czvf C:\tools.tar.gz tools
      working-directory: ${{ env.WORKPATH }}\ikvm\dist
    - name: Upload Tools
      uses: actions/upload-artifact@v3
      with:
        name: tools
        path: C:\tools.tar.gz
    - name: Package Image
      run: tar czvf C:\image.tar.gz image
      working-directory: ${{ env.WORKPATH }}\ikvm\dist
    - name: Upload Image
      uses: actions/upload-artifact@v3
      with:
        name: image
        path: C:\image.tar.gz
    - name: Package Tests
      run: tar czvf C:\tests.tar.gz tests
      working-directory: ${{ env.WORKPATH }}\ikvm\dist
    - name: Upload Tests
      uses: actions/upload-artifact@v3
      with:
        name: tests
        path: C:\tests.tar.gz
    - name: Clean Solution
      run: |
        git reset --hard
        git clean -qfdx
      working-directory: ${{ env.WORKPATH }}\ikvm
  test:
    strategy:
      matrix:
        run:
        - IKVM.ByteCode.Tests
        - IKVM.Tests
        - IKVM.Tools.Importer.Tests
        - IKVM.Tools.Exporter.Tests
        - IKVM.Tools.Tests
        - IKVM.JTReg.TestAdapter.Tests
        - IKVM.OpenJDK.Tests?TestPartition=0
        - IKVM.OpenJDK.Tests?TestPartition=1
        - IKVM.OpenJDK.Tests?TestPartition=2
        - IKVM.OpenJDK.Tests?TestPartition=3
        - IKVM.OpenJDK.Tests?TestPartition=4
        - IKVM.OpenJDK.Tests?TestPartition=5
        - IKVM.OpenJDK.Tests?TestPartition=6
        - IKVM.OpenJDK.Tests?TestPartition=7
        tfm:
        - net461
        - netcoreapp3.1
        - net6.0
        sys:
        - windows
        - linux
        exclude:
        - tfm: net461
          sys: linux
        - run: IKVM.Tools.Exporter.Tests
          tfm: net6.0
        - run: IKVM.Tools.Importer.Tests
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=0
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=1
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=2
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=3
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=4
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=5
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=6
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=7
          tfm: net6.0
        include:
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: net472
          sys: windows
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: netcoreapp3.1
          sys: windows
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: net6.0
          sys: windows
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: netcoreapp3.1
          sys: linux
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: net6.0
          sys: linux
        - run: IKVM.MSBuild.Tests
          tfm: net6.0
          sys: windows
        - run: IKVM.MSBuild.Tests
          tfm: net6.0
          sys: linux
        - run: IKVM.NET.Sdk.Tests
          tfm: net6.0
          sys: windows
        - run: IKVM.NET.Sdk.Tests
          tfm: net6.0
          sys: linux
    name: Test (${{ matrix.run }}:${{ matrix.tfm }}:${{ matrix.sys }}
    needs:
    - build-ikvm
    timeout-minutes: 240
    runs-on: ${{ fromJSON('{"windows":["windows-2022"],"linux":["ubuntu-22.04"]}')[matrix.sys] }}
    steps:
    - name: Set Paths (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $dir="C:\work"
        mkdir $dir
        mkdir $dir\temp
        mkdir $dir\dotnet
        mkdir $dir\nuget
        mkdir $dir\nuget\packages
        mkdir $dir\ikvm
        mkdir $dir\ikvm\dist
        Add-Content $env:GITHUB_ENV "`nIKVMPATH=$dir\ikvm"
        Add-Content $env:GITHUB_ENV "`nTMP=$dir\temp`nTEMP=$dir\temp`nTMPDIR=$dir\temp"
        Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=$dir\dotnet"
        Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=$dir\nuget\packages"
    - name: Set Paths (Linux)
      if: runner.os == 'Linux'
      shell: pwsh
      run: |
        $dir="${{ runner.temp }}/work"
        mkdir $dir
        mkdir $dir/temp
        mkdir $dir/dotnet
        mkdir $dir/nuget
        mkdir $dir/nuget/packages
        mkdir $dir/ikvm
        mkdir $dir/ikvm/dist
        Add-Content $env:GITHUB_ENV "`nIKVMPATH=$dir/ikvm"
        Add-Content $env:GITHUB_ENV "`nTMP=$dir/temp`nTEMP=$dir/temp`nTMPDIR=$dir/temp"
        Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=$dir/dotnet"
        Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=$dir/nuget/packages"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Setup WSL
      if: matrix.sys == 'windows'
      uses: Vampire/setup-wsl@v1
    - name: Download Tests
      uses: actions/download-artifact@v3
      with:
        name: tests
        path: ${{ env.IKVMPATH }}/dist
    - name: Restore Tests
      run: tar xzvf tests.tar.gz
      working-directory: ${{ env.IKVMPATH }}/dist
    - name: Delete Tests
      shell: pwsh
      run: ri tests.tar.gz
      working-directory: ${{ env.IKVMPATH }}/dist
    - name: Execute Tests
      timeout-minutes: 120
      shell: pwsh
      run: |
        # assign powershell variables
        $run = "${{ matrix.run }}"
        $tfm = "${{ matrix.tfm }}"
        $sys = "${{ matrix.sys }}"

        # suite name can contain filter expression after ?
        $split = $run.IndexOf("?")
        if ($split -gt -1) {
            $tst = $run.Substring(0, $split)
            $qry = $run.Substring($split + 1)
        } else {
            $tst = $run
        }

        # scan for test assemblies
        $tests = $(gci .\tests\$tst\$tfm -Recurse -Filter '*.Tests.dll')

        # if a query was specified, add to test command
        if ($tests) {
            if ($qry -ne "" -and $qry -ne $null) {
                Add-Content $env:GITHUB_ENV "`nRET=TestResults--$tst-$qry--$tfm--$sys"
                dotnet test -f $tfm --blame -v 2 --results-directory "TestResults" --logger:"console;verbosity=detailed" --logger:trx --collect "Code Coverage" --filter "$qry" $tests
            } else {
                Add-Content $env:GITHUB_ENV "`nRET=TestResults--$tst--$tfm--$sys"
                dotnet test -f $tfm --blame -v 2 --results-directory "TestResults" --logger:"console;verbosity=detailed" --logger:trx --collect "Code Coverage" $tests
            }
        }
      working-directory: ${{ env.IKVMPATH }}/dist
    - name: Upload Test Results
      if: always() && startsWith(env.RET, 'TestResults--')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RET }}
        path: ${{ env.IKVMPATH }}/dist/TestResults
  release:
    name: Release
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/')
    needs:
    - test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=${{ runner.temp }}/dotnet"
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      id: GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        useConfigFile: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: dist
    - name: Restore NuGet Packages
      run: tar xzvf nuget.tar.gz
      working-directory: dist
    - name: Download Binaries
      uses: actions/download-artifact@v3
      with:
        name: bin
        path: dist
    - name: Restore Binaries
      run: tar xzvf bin.tar.gz
      working-directory: dist
    - name: Compress Binaries
      shell: pwsh
      run: cd dist && gi bin/* | %{ $tfm = $_.Name; Push-Location "bin/$tfm"; zip -r "../IKVM-${env:GitVersion_SemVer}-bin-$tfm.zip" .; tar czvf "../IKVM-${env:GitVersion_SemVer}-bin-$tfm.tar.gz" .; Pop-Location }
    - name: Download Tools
      uses: actions/download-artifact@v3
      with:
        name: tools
        path: dist
    - name: Restore Tools
      run: tar xzvf tools.tar.gz
      working-directory: dist
    - name: Compress Tools
      shell: pwsh
      run: cd dist && gi tools/*/* | %{ $tfm = $_.Parent.Name; $rid = $_.Name; Push-Location "tools/$tfm/$rid"; zip -r "../../IKVM-${env:GitVersion_SemVer}-tools-$tfm-$rid.zip" .; tar czvf "../../IKVM-${env:GitVersion_SemVer}-tools-$tfm-$rid.tar.gz" .; Pop-Location }
    - name: Download Image
      uses: actions/download-artifact@v3
      with:
        name: image
        path: dist
    - name: Restore Image
      run: tar xzvf image.tar.gz
      working-directory: dist
    - name: Compress Image
      shell: pwsh
      run: cd dist && gi image/*/* | %{ $tfm = $_.Parent.Name; $rid = $_.Name; Push-Location "image/$tfm/$rid"; zip -r "../../IKVM-${env:GitVersion_SemVer}-image-$tfm-$rid.zip" .; tar czvf "../../IKVM-${env:GitVersion_SemVer}-image-$tfm-$rid.tar.gz" .; Pop-Location }
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.event.head_commit.message == '+push'
      uses: ncipollo/release-action@v1.10.0
      with:
        tag: ${{ steps.GitVersion.outputs.semVer }}
        artifacts: dist/nuget/*.nupkg,dist/bin/*.zip,dist/bin/*.tar.gz,dist/image/*.zip,dist/image/*.tar.gz,dist/tools/*.zip,dist/tools/*.tar.gz
        generateReleaseNotes: true
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (GitHub)
      shell: pwsh
      run: dotnet nuget push dist/nuget/*.nupkg --source $env:GITHUB_REPOS --api-key $env:GITHUB_TOKEN --skip-duplicate --no-symbols
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (Azure DevOps)
      shell: pwsh
      run: |
        dotnet nuget add source $env:AZUREDEVOPS_REPOS --name az --username az --password $env:AZUREDEVOPS_TOKEN --store-password-in-clear-text
        dotnet nuget push dist/nuget/*.nupkg --source az --api-key az --skip-duplicate --no-symbols
      env:
        AZUREDEVOPS_REPOS: https://pkgs.dev.azure.com/ikvm-revived/ikvm/_packaging/ikvm-ci/nuget/v3/index.json
        AZUREDEVOPS_TOKEN: ${{ secrets.AZUREDEVOPS_PAT }}
    - name: Push NuGet
      if: github.ref == 'refs/heads/main' || github.event.head_commit.message == '+push'
      shell: pwsh
      run: dotnet nuget push dist/nuget/*.nupkg --source $env:NUGET_REPOS --api-key $env:NUGET_TOKEN --skip-duplicate
      env:
        NUGET_REPOS: https://api.nuget.org/v3/index.json
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
